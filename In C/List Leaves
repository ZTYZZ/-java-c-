/*

03-树2 List Leaves（25 分）
Given a tree, you are supposed to list all the leaves in the order of top down, and left to right.

Input Specification:

Each input file contains one test case. For each case, the first line gives a positive integer N (≤10) which is the total number of nodes in the tree -- and hence the nodes are numbered from 0 to N−1. Then N lines follow, each corresponds to a node, and gives the indices of the left and right children of the node. If the child does not exist, a "-" will be put at the position. Any pair of children are separated by a space.

Output Specification:

For each test case, print in one line all the leaves' indices in the order of top down, and left to right. There must be exactly one space between any adjacent numbers, and no extra space at the end of the line.

Sample Input:

8
1 -
- -
0 -
2 7
- -
- -
5 -
4 6
Sample Output:

4 1 5

*/


#include <stdio.h>
#include <stdlib.h>
#define Null -1
#define MaxTree 10
typedef int Tree;
int N;
struct TreeNode {
	Tree Left;
	Tree Right;
}T1[MaxTree]; 

struct Queue{
	int head;
	int rear;
	int array[MaxTree];
};
void add(struct Queue *queue,int data);
int Delete(struct Queue *queue);

Tree BuildTree(struct TreeNode T[]) {
	Tree root = Null;
	char cl,cr;
	int i;
	int check[MaxTree];
	scanf("%d",&N);
	
	if(N) {
		for(i = 0;i<N;i++) check[i] = 0;
		for(i = 0;i<N;i++) {
			scanf("\n%c %c",&cl,&cr);
			if(cl!='-') {
				T[i].Left = cl-'0';
				check[T[i].Left] = 1;
			}
			else T[i].Left = Null;
			
			if(cr!='-') {
				T[i].Right = cr-'0';
				check[T[i].Right] = 1;
			}
			else T[i].Right = Null;
		}
	}
	for(i = 0;i<N;i++) {
		if(check[i] == 0) {
			root = i;
			break;
		}
		
	}
	return root;
	
}

void printLeaves(Tree T) {

	struct Queue *queue;
	queue = (struct Queue*)malloc(sizeof(struct Queue));
	queue->head=0;
	queue->rear=0;
	int p = 0;
	int i=T;
	int queues[MaxTree];
	//printf("我初始化好了,请指示！"); 
	while(N) {
		//printf("我要进循环了"); 
		if(T == Null) printf("NULL");
		if(T1[i].Left==Null&&T1[i].Right==Null) {
			printf("%d",i);
			if(N!=1) {
				printf(" ");
			}
		}
		if(T1[i].Left!=Null) add(queue,T1[i].Left);
		if(T1[i].Right!=Null) add(queue,T1[i].Right);
		
		i=Delete(queue);
		//printf("%d",i);
		N--;
		 
	}
	
}
void add(struct Queue *queue,int data) {
	if((queue->rear+1)%MaxTree == queue->head) {
		printf("队列已满"); 
	}
	queue->rear = (queue->rear+1) % MaxTree; 
	queue->array[queue->rear] = data; 
	//printf("我在第%d的地方，加了数据%d\n",queue->rear,queue->array[queue->rear]);
}

int Delete(struct Queue *queue) {
	if(queue->rear == queue->head) {
		
		return -1;
	}
	else {
		queue->head = (queue->head+1)%MaxTree;
		return queue->array[queue->head];
	}
} 



int main() {
	Tree R1;
	R1 = BuildTree(T1);
//	printf("我建好树了！ 绝对不是我的毛病！！！"); 
	printLeaves(R1);

}
